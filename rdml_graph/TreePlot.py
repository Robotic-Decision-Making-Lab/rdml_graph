# TreePlot.py
# Written Ian Rankin - February 2020
#
# A set of functions to plot a tree from a certain node.
# Can also be used to show the tree structure generated by a BFS.

import matplotlib.pyplot as plt


# plotTree
# plot's a tree using a BFS search through the environment.
# Each level is given equal space.
# @param root - the top of the tree given as a Node
# @param max_levels - the max number of levels of the tree to plot.
# @param show_labels - shows the labels the nodes using the id of node.
def plotTree(root, max_levels=-1, show_labels=False, show_weights=False):
    frontier = deque()
    frontier.append((root, 0))
    explored = set()

    nodesLevels = [[]]

    while len(frontier) > 0:
        n, level = frontier.popLeft()
        if max_levels != -1 and level >= max_levels:
            break

        if n not in explored:
            explored.add(n)
            successors = n.successor()

            # add the current node to node levels.
            if len(nodesLevels) > level:
                nodesLevels[level].append(n)
            else:
                #add a new layer
                nodesLevels.append([n])

            for succ, cost in successors:
                if succ not in explored:
                    frontier.append((succ, level+1))

    # BFS search done, plot tree
    num_levels = len(nodesLevels)
    total_nodes = sum([len(lev) for lev in nodesLevels])

    pts = np.array((total_nodes, 2))
    edges = np.array((-1,2))

    idx = 0
    for l in range(num_levels):
        level = nodesLevels[l]
        for i in range(len(level)):
            n =
            pts[idx][1] = -l
            pts[idx][0] = i






#
